package com.itaka.blog.service.impl;

import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.itaka.blog.mapper.LogMapper;
import com.itaka.blog.mapper.UserMapper;
import com.itaka.blog.pojo.Log;
import com.itaka.blog.pojo.User;
import com.itaka.blog.service.LoginService;
import com.itaka.blog.util.AESCryPTUtil;
import com.itaka.blog.util.PropertiesUtils;
import com.itaka.blog.util.RandomIDUtil;

/**
 * 
 * ClassName: LoginServiceImpl <br/> 
 * Function: 注册、登录接口实现类 <br/> 
 * date: 2018年6月20日 下午9:13:39 <br/> 
 * 
 * @author Jerry
 * @version
 */
@Service
public class LoginServiceImpl implements LoginService{

	private Logger logger = LoggerFactory.getLogger(getClass());
	
	@Autowired
	private UserMapper userMapper;
	
	@Autowired
	private LogMapper logMapper;
	
	/**
	 * 密码加密密钥
	 */
	private String keyStr = PropertiesUtils.get("passwordStrAES");
	
	@Override
	@Transactional
	public void register(String username,String regIp,String password) {
		try {
			logger.info("register方法---start---");
			int count = userMapper.getUserCountByUsername(username, User.USER_TYPE_NOMAL);
			if (count<=0) {
				User user = new User();
				user.setCreateTime(new Date());
				user.setUsername(username);
				user.setUserType(User.USER_TYPE_NOMAL);
				user.setPassword(AESCryPTUtil.aesEncrypt(keyStr, password));
				user.setStatus(1);
				user.setRegIp(regIp);
				userMapper.insert(user);
			}else{
				logger.info("用户名已存在！");
				throw new RuntimeException("用户名已存在！");
			}
			logger.info("register方法---end---");
		} catch (Exception e) {
			logger.error(e.getMessage());
			e.printStackTrace();
		}
	}

	@Override
	public boolean checkUsername(String username, String userType) {
		return this.userMapper.getUserCountByUsername(username, userType)<=0;
	}

	@Override
	@Transactional
	public User login(String username, String password, String userType, String ip) {
		User user = null;
		try {
			logger.info("login---start---");
			user = this.userMapper.loginByUsername(username,AESCryPTUtil.aesEncrypt(keyStr, password),userType);
			if (user!=null) {
				Log log = new Log(RandomIDUtil.getRandomID(),user.getId(),username,userType,ip,new Date(),new Date());
				//插入日志
				logMapper.insert(log);
				//首次登陆，设置经验+10
				if (null == user.getLastLoginTime()) {
					user.setExperience(10);
				}
				user.setLastLoginIp(ip);
				user.setLastLoginTime(new Date());
				user.setUpdateTime(new Date());
				//首次登陆，设置登陆次数为1
				if (null == user.getLoginCount()){
					user.setLoginCount(1);
				}else{//否则先获取登陆次数，再加1
					user.setLoginCount(user.getLoginCount()+1);
				}
				userMapper.updateByPrimaryKeySelective(user);
			}else{
				logger.info("用户名或密码错误！");
				throw new RuntimeException("用户名或密码错误！");
			}
		} catch (Exception e) {
			logger.error(e.getMessage());
		}
		logger.info("login---end---");
		return user;
	}

	/** 
	 * Function : 
	 * @see com.itaka.blog.service.LoginService#updatePasswordById(java.lang.String) 
	 */
	@Override
	public int updateUser(Integer userId,String username,String password) {
		User user = userMapper.selectByPrimaryKey(userId);
		if (null != user) {
			int count = userMapper.getUserCountByNameAndPwd(user.getUsername(), user.getPassword());
			if (count<=0) {
				throw new RuntimeException("用户名或密码错误！");
			}else{
				user.setUsername(username);
				user.setPassword(password);
				user.setUpdateTime(new Date());
				return userMapper.updateByPrimaryKeySelective(user);
			}
		}else{
			return 0;
		}
	}

	/** 
	 * Function : 
	 * @see com.itaka.blog.service.LoginService#getUserCountByNameAndPwd(java.lang.String, java.lang.String) 
	 */
	@Override
	public int getUserCountByNameAndPwd(String username, String password) {
		return userMapper.getUserCountByNameAndPwd(username, password);
	}
	
}
